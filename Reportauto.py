import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from docx import Document
from docx.shared import Inches, RGBColor
from io import BytesIO
import openpyxl
import os

st.set_page_config(page_title="Ph√¢n t√≠ch ƒêi·ªán l·ª±c", layout="wide")
st.title("üîç ·ª®ng d·ª•ng ki·ªÉm tra h·ªá th·ªëng ƒëo ƒë·∫øm ƒëi·ªán")

# Tabs
tabs = st.tabs(["üõ†Ô∏è X·ª≠ l√Ω d·ªØ li·ªáu", "üìä ƒê√°nh gi√° v√† ph√¢n t√≠ch", "üìà So s√°nh d·ªØ li·ªáu"])

# ================= Tab 1: X·ª≠ l√Ω d·ªØ li·ªáu =================
with tabs[0]:
    st.header("üõ†Ô∏è X·ª≠ l√Ω d·ªØ li·ªáu k·∫øt qu·∫£ ki·ªÉm tra")

    uploaded_source = st.file_uploader("üìÇ T·∫£i l√™n file ngu·ªìn (K·∫øt qu·∫£ ki·ªÉm tra)", type=["xlsx"], key="source")
    uploaded_template = st.file_uploader("üìÇ T·∫£i l√™n file m·∫´u t·ªïng h·ª£p (Tong hop ket qua ktra dinh ky)", type=["xlsx"], key="template")

    if uploaded_source and uploaded_template:
        from tempfile import NamedTemporaryFile
        with NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            tmp.write(uploaded_source.read())
            tmp_path = tmp.name
        wb_source = openpyxl.load_workbook(tmp_path, data_only=True)
        ws_source = wb_source.active

        wb_target = openpyxl.load_workbook(uploaded_template)
        ws_target = wb_target["KQUA"]

        for row in range(5, 77):
            for col in range(3, 9):
                value = ws_source.cell(row=row, column=col).value
                ws_target.cell(row=row, column=col).value = value

        today_str = datetime.now().strftime("%d%m%Y")
        output_folder = r"C:\Project_Tiennm\Bao cao ktra dinh ky"
        os.makedirs(output_folder, exist_ok=True)
        output_path = os.path.join(output_folder, f"Tong_hop_ket_qua_den_ngay_{today_str}.xlsx")

        wb_target.save(output_path)

        st.success(f"‚úÖ ƒê√£ x·ª≠ l√Ω v√† l∆∞u file t·∫°i: {output_path}")

        # Cho ph√©p t·∫£i tr·ª±c ti·∫øp file sau x·ª≠ l√Ω
        output_buffer = BytesIO()
        wb_target.save(output_buffer)
        output_buffer.seek(0)

        st.download_button(
            label="üì• T·∫£i file t·ªïng h·ª£p ƒë√£ x·ª≠ l√Ω",
            data=output_buffer,
            file_name=f"Tong_hop_ket_qua_den_ngay_{today_str}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )


# ================= Tab 2: ƒê√°nh gi√° v√† ph√¢n t√≠ch =================
with tabs[1]:
    st.header("üìä ƒê√°nh gi√° v√† ph√¢n t√≠ch k·∫øt qu·∫£ ki·ªÉm tra")

    uploaded_result = st.file_uploader("üìÇ T·∫£i l√™n file t·ªïng h·ª£p k·∫øt qu·∫£ ƒë√£ x·ª≠ l√Ω", type=["xlsx"], key="result")

    if uploaded_result:
        df = pd.read_excel(uploaded_result, sheet_name="Tong hop luy ke", header=None)
        df_cleaned = df.iloc[4:].copy()
        df_cleaned.columns = [
            "STT", "ƒêi·ªán l·ª±c", "1P_GT", "1P_TT", "3P_GT", "3P_TT",
            "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"
        ]
        df_cleaned = df_cleaned[df_cleaned["ƒêi·ªán l·ª±c"].notna()]
        cols_to_numeric = ["1P_GT", "1P_TT", "3P_GT", "3P_TT", "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]
        df_cleaned[cols_to_numeric] = df_cleaned[cols_to_numeric].apply(pd.to_numeric, errors='coerce')
        df_cleaned["T·ª∑ l·ªá"] = df_cleaned["T·ª∑ l·ªá"] * 100

        total_current = df_cleaned["T·ªïng c√¥ng t∆°"].sum()
        total_plan = df_cleaned["K·∫ø ho·∫°ch"].sum()
        current_date = datetime.now()
        days_passed = (current_date - datetime(2025, 1, 1)).days
        days_total = (datetime(2025, 9, 30) - datetime(2025, 1, 1)).days
        avg_per_day = total_current / days_passed
        forecast_total = avg_per_day * days_total
        forecast_ratio = forecast_total / total_plan

        st.metric("T·ªïng ƒë√£ th·ª±c hi·ªán", f"{total_current:,}")
        st.metric("K·∫ø ho·∫°ch", f"{total_plan:,}")
        st.metric("T·ªëc ƒë·ªô TB/ng√†y", f"{avg_per_day:.2f}")
        st.metric("D·ª± b√°o ƒë·∫øn 30/09/2025", f"{int(forecast_total):,}")
        st.metric("T·ª∑ l·ªá d·ª± b√°o", f"{forecast_ratio*100:.2f}%")

        # Ph√¢n t√≠ch Top 3 / Bottom 3
        df_sorted = df_cleaned.sort_values(by="T·ª∑ l·ªá", ascending=False)
        top_3 = df_sorted.head(3)
        bottom_3 = df_sorted.tail(3)

        # Bi·ªÉu ƒë·ªì t·ªïng h·ª£p
        fig, ax = plt.subplots(figsize=(10, 5))
        bars = ax.bar(df_cleaned["ƒêi·ªán l·ª±c"], df_cleaned["T·ª∑ l·ªá"])
        ax.set_ylabel("T·ª∑ l·ªá ho√†n th√†nh (%)")
        ax.set_title("T·ª∑ l·ªá ho√†n th√†nh k·∫ø ho·∫°ch theo ƒêi·ªán l·ª±c")
        ax.tick_params(axis='x', rotation=45)
        for bar in bars:
            height = bar.get_height()
            ax.annotate(f"{height:.1f}%", xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')
        st.pyplot(fig)

        # Bi·ªÉu ƒë·ªì Top 3
        fig_top, ax_top = plt.subplots(figsize=(6, 4))
        bars_top = ax_top.bar(top_3["ƒêi·ªán l·ª±c"], top_3["T·ª∑ l·ªá"])
        ax_top.set_title("Top 3 ƒêi·ªán l·ª±c t·ª∑ l·ªá cao nh·∫•t")
        for bar in bars_top:
            height = bar.get_height()
            ax_top.annotate(f"{height:.1f}%", xy=(bar.get_x() + bar.get_width() / 2, height),
                            xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')
        st.pyplot(fig_top)

        # Bi·ªÉu ƒë·ªì Bottom 3
        fig_bot, ax_bot = plt.subplots(figsize=(6, 4))
        bars_bot = ax_bot.bar(bottom_3["ƒêi·ªán l·ª±c"], bottom_3["T·ª∑ l·ªá"])
        ax_bot.set_title("Bottom 3 ƒêi·ªán l·ª±c t·ª∑ l·ªá th·∫•p nh·∫•t")
        for bar in bars_bot:
            height = bar.get_height()
            ax_bot.annotate(f"{height:.1f}%", xy=(bar.get_x() + bar.get_width() / 2, height),
                            xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')
        st.pyplot(fig_bot)

        # ƒê√°nh gi√° n√¢ng cao
        st.subheader("üìå ƒê√°nh gi√° t·ªïng th·ªÉ")
        if forecast_ratio * 100 >= 100:
            st.success("‚úÖ D·ª± b√°o s·∫Ω ƒê·∫†T k·∫ø ho·∫°ch t·ªïng th·ªÉ ƒë·∫øn 30/09/2025.")
        else:
            st.error("‚ùå D·ª± b√°o s·∫Ω KH√îNG ƒê·∫†T k·∫ø ho·∫°ch t·ªïng th·ªÉ ƒë·∫øn 30/09/2025.")

        # ƒê√°nh gi√° t·ª´ng ƒêi·ªán l·ª±c ƒë·∫°t / kh√¥ng ƒë·∫°t k·∫ø ho·∫°ch
        st.subheader("üìã ƒê√°nh gi√° theo t·ª´ng ƒêi·ªán l·ª±c")
        df_cleaned["D·ª± b√°o t·ª∑ l·ªá"] = df_cleaned["T·ª∑ l·ªá"] * (days_total / days_passed)
        df_cleaned["K·∫øt lu·∫≠n"] = df_cleaned["D·ª± b√°o t·ª∑ l·ªá"].apply(lambda x: "ƒê·∫°t" if x >= 100 else "Kh√¥ng ƒë·∫°t")
        st.dataframe(df_cleaned[["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá", "D·ª± b√°o t·ª∑ l·ªá", "K·∫øt lu·∫≠n"]])

        # Xu·∫•t Word c√≥ bi·ªÉu ƒë·ªì
        def generate_analysis_docx():
            doc = Document()
            doc.add_heading('B√ÅO C√ÅO PH√ÇN T√çCH K·∫æT QU·∫¢ KI·ªÇM TRA', 0)
            doc.add_paragraph(f"T·ªïng c√¥ng t∆° ƒë√£ th·ª±c hi·ªán: {total_current:,}")
            doc.add_paragraph(f"K·∫ø ho·∫°ch t·ªïng: {total_plan:,}")
            doc.add_paragraph(f"T·ªëc ƒë·ªô trung b√¨nh/ng√†y: {avg_per_day:.2f} c√¥ng t∆°/ng√†y")
            doc.add_paragraph(f"D·ª± b√°o ƒë·∫øn 30/09/2025: {int(forecast_total):,} c√¥ng t∆°")
            doc.add_paragraph(f"T·ª∑ l·ªá d·ª± b√°o: {forecast_ratio*100:.2f}%")
            if forecast_ratio * 100 >= 100:
                doc.add_paragraph("‚úÖ D·ª± b√°o s·∫Ω ƒê·∫†T k·∫ø ho·∫°ch t·ªïng th·ªÉ ƒë·∫øn 30/09/2025.")
            else:
                doc.add_paragraph("‚ùå D·ª± b√°o s·∫Ω KH√îNG ƒê·∫†T k·∫ø ho·∫°ch t·ªïng th·ªÉ ƒë·∫øn 30/09/2025.")

            # ƒê√°nh gi√° t·ª´ng ƒêi·ªán l·ª±c
            doc.add_heading("I. K·∫æT QU·∫¢ TH·ª∞C HI·ªÜN T·ª™NG ƒêI·ªÜN L·ª∞C", level=1)
            table_eval = doc.add_table(rows=1, cols=6)
            table_eval.style = 'Table Grid'
            hdr = table_eval.rows[0].cells
            hdr[0].text = "ƒêi·ªán l·ª±c"
            hdr[1].text = "T·ªïng c√¥ng t∆°"
            hdr[2].text = "K·∫ø ho·∫°ch"
            hdr[3].text = "T·ª∑ l·ªá hi·ªán t·∫°i"
            hdr[4].text = "D·ª± b√°o t·ª∑ l·ªá"
            hdr[5].text = "K·∫øt lu·∫≠n"
            for _, row in df_cleaned.iterrows():
                r = table_eval.add_row().cells
                r[0].text = str(row['ƒêi·ªán l·ª±c'])
                r[1].text = f"{int(row['T·ªïng c√¥ng t∆°']) if pd.notna(row['T·ªïng c√¥ng t∆°']) and not pd.isna(row['T·ªïng c√¥ng t∆°']) else 'N/A'}"
                r[2].text = f"{int(row['K·∫ø ho·∫°ch']) if pd.notna(row['K·∫ø ho·∫°ch']) and not pd.isna(row['K·∫ø ho·∫°ch']) else 'N/A'}"
                r[3].text = f"{row['T·ª∑ l·ªá']:.2f}%" if pd.notna(row['T·ª∑ l·ªá']) and not pd.isna(row['T·ª∑ l·ªá']) else 'N/A'
                r[4].text = f"{row['D·ª± b√°o t·ª∑ l·ªá']:.2f}%" if pd.notna(row['D·ª± b√°o t·ª∑ l·ªá']) and not pd.isna(row['D·ª± b√°o t·ª∑ l·ªá']) else 'N/A'
                r[5].text = row['K·∫øt lu·∫≠n'] if pd.notna(row['K·∫øt lu·∫≠n']) else 'N/A'

                if row['K·∫øt lu·∫≠n'] == 'Kh√¥ng ƒë·∫°t':
                    for cell in r:
                        for paragraph in cell.paragraphs:
                            for run in paragraph.runs:
                                run.font.color.rgb = RGBColor(255, 0, 0)
            

            img_buf_all, img_buf_top, img_buf_bot = BytesIO(), BytesIO(), BytesIO()
            fig.savefig(img_buf_all, format="png")
            fig_top.savefig(img_buf_top, format="png")
            fig_bot.savefig(img_buf_bot, format="png")
            img_buf_all.seek(0)
            img_buf_top.seek(0)
            img_buf_bot.seek(0)

            doc.add_heading("II. BI·ªÇU ƒê·ªí T·ªîNG H·ª¢P", level=1)
            doc.add_picture(img_buf_all, width=Inches(6))
            doc.add_heading("III. TOP 3", level=1)
            doc.add_picture(img_buf_top, width=Inches(5))
            table_top = doc.add_table(rows=1, cols=4)
            table_top.style = 'Table Grid'
            hdr_cells = table_top.rows[0].cells
            hdr_cells[0].text = "ƒêi·ªán l·ª±c"
            hdr_cells[1].text = "T·ªïng c√¥ng t∆°"
            hdr_cells[2].text = "K·∫ø ho·∫°ch"
            hdr_cells[3].text = "T·ª∑ l·ªá"
            for _, row in top_3.iterrows():
                row_cells = table_top.add_row().cells
                row_cells[0].text = str(row['ƒêi·ªán l·ª±c'])
                row_cells[1].text = f"{int(row['T·ªïng c√¥ng t∆°']):,}"
                row_cells[2].text = f"{int(row['K·∫ø ho·∫°ch']):,}"
                row_cells[3].text = f"{row['T·ª∑ l·ªá']:.2f}%"
            doc.add_heading("IV. BOTTOM 3", level=1)
            doc.add_picture(img_buf_bot, width=Inches(5))
            table_bot = doc.add_table(rows=1, cols=4)
            table_bot.style = 'Table Grid'
            hdr_cells = table_bot.rows[0].cells
            hdr_cells[0].text = "ƒêi·ªán l·ª±c"
            hdr_cells[1].text = "T·ªïng c√¥ng t∆°"
            hdr_cells[2].text = "K·∫ø ho·∫°ch"
            hdr_cells[3].text = "T·ª∑ l·ªá"
            for _, row in bottom_3.iterrows():
                row_cells = table_bot.add_row().cells
                row_cells[0].text = str(row['ƒêi·ªán l·ª±c'])
                row_cells[1].text = f"{int(row['T·ªïng c√¥ng t∆°']):,}"
                row_cells[2].text = f"{int(row['K·∫ø ho·∫°ch']):,}"
                row_cells[3].text = f"{row['T·ª∑ l·ªá']:.2f}%"

            buffer = BytesIO()
            doc.save(buffer)
            buffer.seek(0)
            return buffer

        analysis_file = generate_analysis_docx()
        st.download_button("üìÑ T·∫£i b√°o c√°o Word ph√¢n t√≠ch", data=analysis_file, file_name="Bao_cao_Phan_tich_DienLuc.docx")

# ================= Tab 3: So s√°nh d·ªØ li·ªáu =================
with tabs[2]:
    st.header("üìà So s√°nh d·ªØ li·ªáu hi·ªán t·∫°i v√† qu√° kh·ª©")

    uploaded_old = st.file_uploader("üìÇ T·∫£i l√™n file d·ªØ li·ªáu c≈©", type=["xlsx"], key="old")
    uploaded_new = st.file_uploader("üìÇ T·∫£i l√™n file d·ªØ li·ªáu hi·ªán t·∫°i", type=["xlsx"], key="new")

    if uploaded_old and uploaded_new:
        df_old = pd.read_excel(uploaded_old, sheet_name="Tong hop luy ke", header=None)
        df_new = pd.read_excel(uploaded_new, sheet_name="Tong hop luy ke", header=None)

        def clean_dataframe(df):
            df_cleaned = df.iloc[4:].copy()
            df_cleaned.columns = [
                "STT", "ƒêi·ªán l·ª±c", "1P_GT", "1P_TT", "3P_GT", "3P_TT",
                "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"
            ]
            df_cleaned = df_cleaned[df_cleaned["ƒêi·ªán l·ª±c"].notna()]
            cols_to_numeric = ["1P_GT", "1P_TT", "3P_GT", "3P_TT", "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]
            df_cleaned[cols_to_numeric] = df_cleaned[cols_to_numeric].apply(pd.to_numeric, errors='coerce')
            df_cleaned["T·ª∑ l·ªá"] = df_cleaned["T·ª∑ l·ªá"] * 100
            return df_cleaned

        df_old_clean = clean_dataframe(df_old)
        df_new_clean = clean_dataframe(df_new)

        df_compare = pd.merge(df_old_clean, df_new_clean, on="ƒêi·ªán l·ª±c", suffixes=("_C≈©", "_M·ªõi"))
        df_compare["Ch√™nh l·ªách T·ªïng c√¥ng t∆°"] = df_compare["T·ªïng c√¥ng t∆°_M·ªõi"] - df_compare["T·ªïng c√¥ng t∆°_C≈©"]
        df_compare["Ch√™nh l·ªách T·ª∑ l·ªá"] = df_compare["T·ª∑ l·ªá_M·ªõi"] - df_compare["T·ª∑ l·ªá_C≈©"]

        st.subheader("üìã B·∫£ng so s√°nh t·ªïng h·ª£p")
        st.dataframe(df_compare)

        st.subheader("üìà Bi·ªÉu ƒë·ªì so s√°nh T·ª∑ l·ªá ho√†n th√†nh")
        fig, ax = plt.subplots(figsize=(10,5))
        x = range(len(df_compare))
        ax.bar(x, df_compare["T·ª∑ l·ªá_C≈©"], width=0.4, label="T·ª∑ l·ªá C≈©", align="center")
        ax.bar([i + 0.4 for i in x], df_compare["T·ª∑ l·ªá_M·ªõi"], width=0.4, label="T·ª∑ l·ªá M·ªõi", align="center")
        ax.set_xticks([i + 0.2 for i in x])
        ax.set_xticklabels(df_compare["ƒêi·ªán l·ª±c"], rotation=45, ha='right')
        ax.set_ylabel("T·ª∑ l·ªá ho√†n th√†nh (%)")
        ax.legend()
        st.pyplot(fig)

        chart_buffer = BytesIO()
        fig.savefig(chart_buffer, format="png")
        chart_buffer.seek(0)

        def generate_compare_docx():
            doc = Document()
            doc.add_heading("B√ÅO C√ÅO SO S√ÅNH K·∫æT QU·∫¢ KI·ªÇM TRA", 0)
            doc.add_paragraph(f"Ng√†y so s√°nh: {datetime.now().strftime('%d/%m/%Y')}")

            doc.add_heading("I. B·∫¢NG SO S√ÅNH", level=1)
            table = doc.add_table(rows=1, cols=7)
            hdr_cells = table.rows[0].cells
            headers = ["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆° C≈©", "T·ªïng c√¥ng t∆° M·ªõi", "Ch√™nh l·ªách C√¥ng t∆°", "T·ª∑ l·ªá C≈©", "T·ª∑ l·ªá M·ªõi", "Ch√™nh l·ªách T·ª∑ l·ªá"]
            for i, text in enumerate(headers):
                hdr_cells[i].text = text

            for _, row in df_compare.iterrows():
                cells = table.add_row().cells
                cells[0].text = str(row['ƒêi·ªán l·ª±c'])
                cells[1].text = f"{row['T·ªïng c√¥ng t∆°_C≈©']:,}"
                cells[2].text = f"{row['T·ªïng c√¥ng t∆°_M·ªõi']:,}"
                cells[3].text = f"{row['Ch√™nh l·ªách T·ªïng c√¥ng t∆°']:,}"
                cells[4].text = f"{row['T·ª∑ l·ªá_C≈©']:.2f}%"
                cells[5].text = f"{row['T·ª∑ l·ªá_M·ªõi']:.2f}%"
                cells[6].text = f"{row['Ch√™nh l·ªách T·ª∑ l·ªá']:.2f}%"

                if row['Ch√™nh l·ªách T·ª∑ l·ªá'] > 0:
                    for cell in cells:
                        cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 128, 0)
                elif row['Ch√™nh l·ªách T·ª∑ l·ªá'] < 0:
                    for cell in cells:
                        cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 0, 0)

            doc.add_heading("II. BI·ªÇU ƒê·ªí SO S√ÅNH", level=1)
            doc.add_picture(chart_buffer, width=Inches(6))

            doc.add_heading("III. NH·∫¨N X√âT", level=1)
            for _, row in df_compare.iterrows():
                if row['Ch√™nh l·ªách T·ª∑ l·ªá'] > 0:
                    doc.add_paragraph(f"- {row['ƒêi·ªán l·ª±c']}: C√≥ c·∫£i thi·ªán so v·ªõi k·ª≥ tr∆∞·ªõc.")
                elif row['Ch√™nh l·ªách T·ª∑ l·ªá'] < 0:
                    doc.add_paragraph(f"- {row['ƒêi·ªán l·ª±c']}: C√≥ xu h∆∞·ªõng gi·∫£m hi·ªáu qu·∫£.")

            buffer = BytesIO()
            doc.save(buffer)
            buffer.seek(0)
            return buffer

        compare_word_file = generate_compare_docx()
        st.download_button("üìÑ T·∫£i b√°o c√°o Word so s√°nh", data=compare_word_file, file_name="Bao_cao_So_Sanh_DienLuc.docx")

        def generate_compare_excel():
            output = BytesIO()
            df_compare.to_excel(output, index=False)
            output.seek(0)
            return output

        compare_excel_file = generate_compare_excel()
        st.download_button("üìä T·∫£i file Excel so s√°nh", data=compare_excel_file, file_name="So_sanh_DienLuc.xlsx")
